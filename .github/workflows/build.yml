name: Build and Release Plugin

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Prepare Build
      run: |
        # 如果 gradle.properties 存在，删除 Java home 配置
        if [ -f gradle.properties ]; then
          sed -i '/org.gradle.java.home/d' gradle.properties
          echo "Removed Java home configuration from gradle.properties"
        fi
        
        # 显示剩余配置（可选的调试步骤）
        cat gradle.properties || echo "No gradle.properties found"
        
        # 确保 gradlew 可执行
        chmod +x gradlew

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      run: |
        ./gradlew clean build --info --stacktrace
      env:
        GRADLE_OPTS: "-Dorg.gradle.logging.level=info"
    
    - name: Read Version
      id: read_version
      run: |
        VERSION=$(grep 'version ' build.gradle | cut -d "'" -f 2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected Version: $VERSION"
    
    - name: Check if Version Exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        echo "Checking for existing release with tag v${{ steps.read_version.outputs.version }}"
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.read_version.outputs.version }}")
        
        echo "GitHub API Response:"
        echo "$RESPONSE"
        
        if echo "$RESPONSE" | grep -q "message\":\"Not Found"; then
          echo "Release not found"
          echo "exists=not_found" >> $GITHUB_OUTPUT
        else
          echo "Release already exists"
          echo "exists=found" >> $GITHUB_OUTPUT
        fi
    
    - name: Debug Release Information
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Detected Version: ${{ steps.read_version.outputs.version }}"
        echo "Release Exists: ${{ steps.check_release.outputs.exists }}"
    
    - name: Create Release
      if: steps.check_release.outputs.exists == 'not_found'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: v${{ steps.read_version.outputs.version }}
        release_name: Release ${{ steps.read_version.outputs.version }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      if: steps.check_release.outputs.exists == 'not_found'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/MagicBlock-${{ steps.read_version.outputs.version }}.jar
        asset_name: MagicBlock-${{ steps.read_version.outputs.version }}.jar
        asset_content_type: application/java-archive
